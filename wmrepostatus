#!/usr/bin/env python3
# encoding: utf-8
"""
wmrepostatus

Created by Wannes Meert on 24-10-2011.
Copyright (c) 2011 KULeuven. All rights reserved.
"""

import os
import re
import subprocess
import sys
import getopt

## Get repositories
repofilename = os.path.expanduser("~")+"/.wmrepositories"
if not os.path.isfile(repofilename):
	print("Error: did not find repository file: "+repofilename)
	sys.exit(1)
exec(compile(open(repofilename).read(), repofilename, 'exec'))


## Global settings
goto       = -1
curgoto    = 1
debug      = False
verbose    = False
nofetch    = False
repofilter = None
output     = 'txt'
cols       = 70

## Output templates
notsyncedtpl = {
	'txt': '{repocount}{reponame} ({branch}) {filler} {diffcount}',
	'html': '<tr><td><a href="file://{repopath}">{reponame}</a></td><td>{branch}</td><td>{diffcount}</td></tr>'
}

dirtytpl = {
	'txt': '{repocount}{reponame} ({branch}) {filler} {dirtycount}',
	'html': '<tr><td><a href="file://{repopath}">{reponame}</a></td><td>{branch}</td><td>{dirtycount}</td></tr>'
}


help_message = '''
Check up on my local repositories.

Usage:
	wmrepostatus [options]

Options:
	-g, --goto <int>       Open the n'th item in a new terminal
	-l, --list             List all repositories
	-n, --nofetch          Don't fetch

	-o, --output <string>  [html|txt] output
	-t, --html             HTML output

	-v, --verbose          Verbose output
	-d, --debug            Debug output (e.g., git commands)
	-h, --help             This help text
'''


def doReposStatus():
	"""Go over all the repositories."""
	for (idx,repo) in zip(range(1,len(repos)+1), repos):
		if repofilter == None or idx in repofilter:
			doRepoStatus(repo[0], repo[1])


def cmdInRepoDir(repopath, cmd):
	"""Execute the given command in the repository directory."""
	if debug: print("$ "+cmd)
	(res,result) = subprocess.getstatusoutput("cd "+repopath+"; "+cmd)
	if debug: print(result)
	return result


def printRepositories():
	"""Print a list of all repositories known to the system."""
	if verbose:
		print(*[str(idx)+") "+repo[1] for (idx,repo) in zip(range(1,len(repos)+1),repos)], sep="\n")
	else:
		print(*[repo[1] for repo in repos], sep="\n")


def printVerbose(string, end="\n"):
	"""Print the given string if the global option verbose is true."""
	if verbose:
		print(string, end=end)

def printDebug(string, end="\n"):
	"""Print the given string if the global option debug is true."""
	if debug:
		print(string, end=end)

def printDirty(repopath, reponame, branch, dirtycount):
	"""Print the repository to indicate that there are uncommitted changes."""
	global curgoto

	repostring = dirtytpl[output]
	repocount = ''
	if verbose:
		repocount = str(curgoto)+") "
	repostring = repostring.format(reponame=reponame, repopath=repopath, branch=branch, filler='{filler}', dirtycount='{dirtycount}', repocount=repocount)
	fillerlen = cols - len(repostring) - 8 +1
	repostring = repostring.format(dirtycount=dirtycount, filler='.'*fillerlen)
	print(repostring)

	if curgoto == goto:
		openTerminalToDir(repopath)
	curgoto += 1
	

def printStats(repopath, reponame, branch, diffcnt):
	"""Print local-remote statistics for the given repository."""
	global curgoto
	if diffcnt == 0 and not verbose:
		return

	if output not in notsyncedtpl:
		print("ERROR: output type "+output+" unknown")
		return

	#reponame = os.path.basename(repo)
	if diffcnt > 0:
		diffcount = '+'
	elif diffcnt < 0:
		diffcount = ''
	else:
		diffcount = ' '
	diffcount += str(diffcnt)

	repocount = ''
	if verbose:
		repocount = str(curgoto)+") "

	repostring = notsyncedtpl[output]
	repostring = repostring.format(reponame=reponame, repopath=repopath, diffcount='{diffcount}', branch=branch, filler='{filler}', repocount=repocount)
	fillerlen = cols - len(repostring) - 8
	repostring = repostring.format(diffcount=diffcount, filler='.'*fillerlen)
	print(repostring)

	if curgoto == goto:
		openTerminalToDir(repopath)
	curgoto += 1



normalcode = r'\033[0m'
redcode    = r'\033[0;31m'
greencode  = r'\033[0;32m'

def green(string):
	#return greencode+string+normalcode
	return string

def red(string):
	#return redcode+string+normalcode
	return string


def branchStrToList(brancheStr):
	""" Transform string resulting from 'git branch' into a list of
		branche names.

		:returns: List of branch names
	"""
	brancheStr = re.sub(r'^.*->', '', brancheStr)
	brancheStr = re.sub(r'\*', '', brancheStr).strip()
	branches = set(re.split(r'\s+', brancheStr))
	return branches

def openTerminalToDir(path):
	print("Open in new terminal: "+path)
	subprocess.call(["osascript", "-e", "tell app \"Terminal\"\ndo script \"cd "+path+";\ngit status -uno\"\nend tell"])


curbranchpattern = re.compile(r'\* ([^\s]+)')

def doRepoStatus(repotitle, repopath):
	""" Check whether the given repo is up-to-date with the remote
		repositories.
	"""
	printDebug("Checking repository "+repotitle)

	## Directory exists?
	if not os.path.exists(repopath):
		print("Warning: no repository at path: "+repopath)
		return

	## CLEAN REPO
	statusoutput = cmdInRepoDir(repopath, "git status --porcelain")
	dirtyfiles = re.findall(r'^(M| M)', statusoutput)
	if len(dirtyfiles) != 0 :
		branches = cmdInRepoDir(repopath, "git branch 2>/dev/null")
		result = curbranchpattern.search(branches)
		if result != None:
			curbranch = result.group(1)
			printDirty(repopath, repotitle, curbranch, "*"+str(len(dirtyfiles)))
		else:
			print("Warning: No current branch found for "+repotitle)

	## DETECT BRANCHES
	#printVerbose("Detecting branches:")
	
	lbranches = branchStrToList(cmdInRepoDir(repopath, "git branch"))
	printDebug("local branches = "+str(lbranches))
	rbranches = branchStrToList(cmdInRepoDir(repopath, "git branch -r"))
	printDebug("remote branches = "+str(rbranches))

	## FETCH REMOTE REPOS
	#printVerbose("Fetching remote branches")
	if not nofetch:
		result = cmdInRepoDir(repopath, "git fetch --all")
	#printVerbose(result)

	## CHECK LOG DIFF
	for lbranch in lbranches:
		for rbranch in rbranches:
			#printDebug("Checking "+lbranche+" with "+rbranche)
			rname = os.path.basename(rbranch)
			if (lbranch == rname):
				printDebug("Comparing "+lbranch+" and "+rbranch)
				branch = rbranch
				logdiff = cmdInRepoDir(repopath, "git log --pretty=oneline "+rbranch+".."+lbranch)
				if logdiff != "":
					#print("Local repo ahead of remote")
					logdiffs = logdiff.split("\n")
					printStats(repopath, repotitle, branch, len(logdiffs))
				else:
					logdiff = cmdInRepoDir(repopath, "git log --pretty=oneline "+lbranch+".."+rbranch)
					if logdiff != "":
						#print("Remote repo ahead of remote")
						logdiffs = logdiff.split("\n")
						printStats(repopath, repotitle, branch, -1*len(logdiffs))
					else:
						#print("In sync")
						printStats(repopath, repotitle, branch, 0)






class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg


def main(argv=None):
	global verbose
	global output
	global debug
	global nofetch
	global goto
	global repofilter

	if argv is None:
		argv = sys.argv
	try:
		try:
			opts, args = getopt.getopt(argv[1:], "hvo:tldng:f:", ["nofetch", "help", "verbose", "output=", "html", "list", "debug","goto=","filter="])
		except getopt.error as msg:
			raise Usage(msg)

		# option processing
		for option, value in opts:
			if option in ("-v", "--verbose"):
				verbose = True
			if option in ("-d", "--debug"):
				debug = True
			if option in ("-n", "--nofetch"):
				nofetch = True
			if option in ("-h", "--help"):
				raise Usage(help_message)
			if option in ("-o", "--output"):
				output = value
			if option in ("-t", "--html"):
				output = 'html'
			if option in ("-g", "--goto"):
				goto = int(value)
			if option in ("-f", "--filter"):
				exec("global repofilter\nrepofilter = ["+value+"]")
			if option in ("-l", "--list"):
				printRepositories()
				return
	
	except Usage as err:
		print(sys.argv[0].split("/")[-1] + ": " + str(err.msg), file=sys.stderr)
		print("\t for help use --help", file=sys.stderr)
		return 2

	doReposStatus()


if __name__ == "__main__":
	sys.exit(main())



# vim: set ft=python
